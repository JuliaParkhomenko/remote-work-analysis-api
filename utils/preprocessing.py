import pandas as pd

def preprocess_input(data: dict, scaler, scaler_attrition):
    """
    –ü—Ä–∏–π–º–∞—î —Å–ª–æ–≤–Ω–∏–∫ –¥–∞–Ω–∏—Ö –æ–¥–Ω–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î:
    - X_scaled: –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó / –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    - attrition_scaled: –¥–ª—è –º–æ–¥–µ–ª—ñ —Ä–∏–∑–∏–∫—É –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è
    """

    # üü¢ –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –∑ –¥–∞–Ω–∏—Ö
    df = pd.DataFrame([data])

    # –Ø–≤–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —á–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è
    numeric_columns = [
        'HoursWorkedPerWeek',
        'WellBeingScore',
        'JobSatisfaction',
        'EnvironmentSatisfaction',
        'WorkLifeBalance',
        'MonthlyIncome',
        'Age'
    ]
    for col in numeric_columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # –ö–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è EmploymentType –Ω–∞ —á–∏—Å–ª–æ–≤–µ)
    df['EmploymentType'] = df['EmploymentType'].map({'Remote': 0, 'In-Office': 1}).fillna(1)
    df['OverTime'] = df['OverTime'].map({'Yes': 1, 'No': 0}).fillna(0)

    df = df.fillna(0)

    # === –û–∑–Ω–∞–∫–∏ –¥–ª—è scaler (–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è / –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å) ===
    columns_to_scale = [
        'HoursWorkedPerWeek',
        'WellBeingScore',
        'JobSatisfaction',
        'EnvironmentSatisfaction',
        'WorkLifeBalance',
        'EmploymentType'
    ]
    # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –¥–∞–Ω—ñ (StandardScaler)
    X_scaled = scaler.transform(df[columns_to_scale])

    # === –Ü–Ω–¥–µ–∫—Å –¥–æ–±—Ä–æ–±—É—Ç—É –¥–ª—è –º–æ–¥–µ–ª—ñ —Ä–∏–∑–∏–∫—É –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è (attrition) ===
    df['WellBeingLevel'] = df[['JobSatisfaction', 'EnvironmentSatisfaction', 'WorkLifeBalance']].mean(axis=1)
    attrition_features = ['WellBeingLevel', 'OverTime', 'MonthlyIncome', 'Age']
    attrition_scaled = scaler_attrition.transform(df[attrition_features])

    return X_scaled, attrition_scaled
